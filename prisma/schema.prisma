generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Translation {
  id        String   @id @default(cuid())
  key       String   // e.g., "HomePage.title"
  locale    String   // e.g., "en", "lv", "ru"
  value     String   // translated text
  namespace String?  // optional grouping, e.g., "HomePage"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, locale])
  @@index([namespace, locale])
  @@map("translations")
}

model Customer {
  id             String   @id @default(cuid())
  supabaseUserId String   @unique // Supabase auth user ID
  email          String   @unique
  firstName      String?
  lastName       String?
  fullName       String?
  phone          String?
  dateOfBirth    DateTime?
  
  // Address information
  address        String?
  city           String?
  postalCode     String?
  country        String?  @default("LV")
  
  // Preferences
  preferredLocale String? @default("lv")
  newsletterSubscribed Boolean @default(false)
  
  // Customer status
  isActive       Boolean  @default(true)
  emailVerified  Boolean  @default(false)
  
  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastLoginAt    DateTime?

  // Relations
  cart           Cart?
  orders         Order[]

  @@index([email])
  @@index([supabaseUserId])
  @@map("customers")
}

model Cart {
  id         String     @id @default(cuid())
  customerId String?    // NULL for guest users
  guestId    String?    // UUID for guest users
  items      CartItem[]
  
  // Timestamps
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  // One customer can have only one active cart
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@unique([customerId]) // Ensure one cart per customer
  @@index([guestId])
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String  // Product identifier (can be SKU, ID, etc.)
  name      String  // Product name snapshot
  price     Decimal @db.Decimal(10, 2) // Price snapshot at time of adding
  quantity  Int     @default(1)
  imageUrl  String? // Product image snapshot
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  @@unique([cartId, productId]) // Prevent duplicate items in same cart
  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique // Human-readable order number
  customerId  String?     // NULL for guest orders
  
  // Customer info (snapshot at time of order)
  customerEmail     String
  customerFirstName String?
  customerLastName  String?
  customerPhone     String?
  
  // Billing address
  billingAddress    String
  billingCity       String
  billingPostalCode String
  billingCountry    String   @default("LV")
  
  // Shipping address
  shippingAddress    String
  shippingCity       String
  shippingPostalCode String
  shippingCountry    String   @default("LV")
  
  // Order details
  subtotal      Decimal @db.Decimal(10, 2)
  shippingCost  Decimal @db.Decimal(10, 2) @default(0.00)
  totalAmount   Decimal @db.Decimal(10, 2)
  
  // Payment and status
  paymentMethod String // 'bank_transfer', 'card', 'cash_on_delivery'
  orderStatus   String @default("pending") // 'pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'
  paymentStatus String @default("pending") // 'pending', 'paid', 'failed', 'refunded'
  
  // Optional fields
  orderNotes    String?
  
  // Items
  items         OrderItem[]
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  @@index([customerId])
  @@index([orderNumber])
  @@index([orderStatus])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String  // Product identifier
  name      String  // Product name snapshot
  price     Decimal @db.Decimal(10, 2) // Price snapshot
  quantity  Int
  imageUrl  String? // Product image snapshot
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@map("order_items")
}

// Product Management System

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Google", "IKEA"
  code        String    @unique @db.VarChar(3) // e.g., "GOO", "IKE" - 3 letter code
  description String?
  logoUrl     String?
  isActive    Boolean   @default(true)
  
  // Auto-increment counter for product codes
  productCounter Int     @default(0) // Used to generate GOO-001, GOO-002, etc.
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("brands")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Bedroom", "Kitchen"
  slug        String    @unique // URL-friendly version
  description String?
  imageUrl    String?
  parentId    String?   // For subcategories
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([parentId])
  @@index([slug])
  @@map("categories")
}

model StockStatus {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "In Stock", "Out of Stock", "Pre-order"
  code        String    @unique // e.g., "in_stock", "out_of_stock", "pre_order"
  color       String?   // Hex color for display
  isActive    Boolean   @default(true)
  
  // Relations
  products    Product[]
  
  @@map("stock_statuses")
}

model Product {
  id              String      @id @default(cuid())
  code            String      @unique // Auto-generated: GOO-001, GOO-002, etc.
  name            String
  shortDescription String?
  fullDescription String?
  
  // Pricing
  price           Decimal     @db.Decimal(10, 2)
  salePrice       Decimal?    @db.Decimal(10, 2) // Optional sale price
  
  // Stock management
  stock           Int         @default(0)
  stockStatusId   String
  
  // Physical properties
  width           Decimal?    @db.Decimal(8, 2) // cm
  height          Decimal?    @db.Decimal(8, 2) // cm
  depth           Decimal?    @db.Decimal(8, 2) // cm
  weight          Decimal?    @db.Decimal(8, 2) // kg
  
  // Store visibility
  isVisible       Boolean     @default(true) // Show/Hide in store
  isActive        Boolean     @default(true)
  
  // SEO and URLs
  slug            String      @unique // URL-friendly version
  metaTitle       String?
  metaDescription String?
  
  // Images
  mainImageUrl    String?
  imageUrls       String[]    // Array of image URLs
  
  // Relations
  brandId         String
  categoryId      String
  
  brand           Brand       @relation(fields: [brandId], references: [id], onDelete: Restrict)
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  stockStatus     StockStatus @relation(fields: [stockStatusId], references: [id], onDelete: Restrict)
  
  // Product attributes (colors, materials, etc.)
  attributes      ProductAttribute[]
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([brandId])
  @@index([categoryId])
  @@index([stockStatusId])
  @@index([code])
  @@index([slug])
  @@index([isVisible, isActive])
  @@map("products")
}

model AttributeType {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "Color", "Material", "Handle Type"
  code        String    @unique // e.g., "color", "material", "handle_type"
  inputType   String    @default("select") // "select", "text", "color", "number"
  isRequired  Boolean   @default(false)
  sortOrder   Int       @default(0)
  
  // Relations
  values      AttributeValue[]
  productAttributes ProductAttribute[]
  
  @@map("attribute_types")
}

model AttributeValue {
  id              String    @id @default(cuid())
  attributeTypeId String
  name            String    // e.g., "Red", "Oak Wood", "Chrome Handle"
  value           String    // Actual value or code
  colorCode       String?   // For color attributes (hex code)
  imageUrl        String?   // Optional image for the value
  sortOrder       Int       @default(0)
  
  // Relations
  attributeType   AttributeType @relation(fields: [attributeTypeId], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]
  
  @@unique([attributeTypeId, value])
  @@index([attributeTypeId])
  @@map("attribute_values")
}

model ProductAttribute {
  id               String         @id @default(cuid())
  productId        String
  attributeTypeId  String
  attributeValueId String
  customValue      String?        // For text input attributes
  
  // Relations
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeType    AttributeType  @relation(fields: [attributeTypeId], references: [id], onDelete: Cascade)
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)
  
  @@unique([productId, attributeTypeId]) // One value per attribute type per product
  @@index([productId])
  @@index([attributeTypeId])
  @@map("product_attributes")
}

model Slider {
  id                String   @id @default(cuid())
  desktopImageUrl   String   // Image for desktop view
  mobileImageUrl    String   // Image for mobile view
  linkUrl           String?  // Optional link when slide is clicked
  sortOrder         Int      @default(0) // For ordering slides
  isActive          Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  translations      SliderTranslation[]
  
  @@index([sortOrder])
  @@index([isActive])
  @@map("sliders")
}

model SliderTranslation {
  id          String @id @default(cuid())
  sliderId    String
  locale      String // 'lv', 'en', 'ru'
  title       String?
  description String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  slider      Slider @relation(fields: [sliderId], references: [id], onDelete: Cascade)
  
  @@unique([sliderId, locale])
  @@index([sliderId])
  @@index([locale])
  @@map("slider_translations")
}

model TopBarMessage {
  id        String   @id @default(cuid())
  locale    String   // 'lv', 'en', 'ru'
  message   String   // The message text
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([locale])
  @@index([locale])
  @@index([isActive])
  @@map("top_bar_messages")
}